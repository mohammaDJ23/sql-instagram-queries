-- users table


CREATE TABLE users (
	id SERIAL PRIMARY KEY,
	username VARCHAR(30) NOT NULL,
	bio VARCHAR(400) NOT NULL DEFAULT '', 
	avatar VARCHAR(200) NOT NULL DEFAULT '',
	phone VARCHAR(25),
	email VARCHAR(40),
	password VARCHAR(50) NOT NULL,
	status VARCHAR(15),
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
	
	CHECK(COALESCE(email, phone) IS NOT NULL)
	CHECK(COALESCE(NULLIF(email, ''), NULLIF(phone, '')) IS NOT NULL)
);


-- posts table


CREATE TABLE posts (
	id SERIAL PRIMARY KEY,
	url VARCHAR(200) NOT NULL,
	caption VARCHAR(240) NOT NULL DEFAULT '',
	lat REAL CHECK(lat IS NULL OR (lat >= -90 AND lat <= 90)),
	lng REAL CHECK(lng IS NULL OR (lng >= -180 AND lng <= 180)),
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE
);


-- comments table


CREATE TABLE comments (
	id SERIAL PRIMARY KEY,
	contents VARCHAR(240) NOT NULL,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE
);


-- like table


CREATE TABLE likes (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
	comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
	
	CHECK(
		COALESCE((user_id)::BOOLEAN::INTEGER, 0) +
		COALESCE((comment_id)::BOOLEAN::INTEGER, 0) = 1
	),
	
	UNIQUE(user_id, post_id, comment_id)
);


-- photo tags table


CREATE TABLE photo_tags (
	id SERIAL PRIMARY KEY,
	x INTEGER NOT NULL,
	y INTEGER NOT NULL,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	
	UNIQUE(user_id, post_id)
);


-- caption tag table


CREATE TABLE caption_tag (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	
	UNIQUE(user_id, post_id)
);


-- hashtags table


CREATE TABLE hashtags (
 	id SERIAL PRIMARY KEY,
 	title VARCHAR(50) NOT NULL UNIQUE,
 	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);


-- hashtag posts table


CREATE TABLE hashtag_posts (
 	id SERIAL PRIMARY KEY,
 	hashtag_id INTEGER NOT NULL REFERENCES hashtags(id) ON DELETE CASCADE,
 	post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
	
 	UNIQUE(hashtag_id, post_id)
);


-- followers table


CREATE TABLE followers (
 	id SERIAL PRIMARY KEY,
 	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
 	leader_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
 	follower_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	
 	UNIQUE(leader_id, follower_id)
);

